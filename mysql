# 设计一个学生成绩数据库，该库包含学生，老师，课程和成绩等信息并完成后面的练习。

CREATE DATABASE IF NOT EXISTS std_score;

ALTER DATABASE std_score CHAR SET utf8;

SHOW CREATE DATABASE std_score;

USE std_score;
# 学生：学号（SNO）、姓名(SNAME)、性别(SSEX)、生日(SBIRTHDAY )、所属班级(CLASS )
CREATE TABLE IF NOT EXISTS student(
  sno SMALLINT KEY AUTO_INCREMENT,
  sname VARCHAR(20) NOT NULL ,
  ssex ENUM('男','女') NOT NULL ,
  sbirthday DATE NOT NULL ,
  class VARCHAR(20) NOT NULL
) ENGINE innodb;

# 课程：课程编号(CNO)、课程名(CNAME)、授课老师(TNO)

CREATE TABLE IF NOT EXISTS course(
  cno SMALLINT KEY AUTO_INCREMENT,
  cname VARCHAR(20),
  tno VARCHAR(20)
);


# 成绩：学号(SNO)、课程编号(CNO)、得分(DEGREE)
CREATE TABLE IF NOT EXISTS grade(
  sno SMALLINT KEY AUTO_INCREMENT,
  cno SMALLINT NOT NULL ,
  degree SMALLINT NOT NULL ,
  FOREIGN KEY (cno) REFERENCES course(cno)
);

ALTER TABLE grade ADD FOREIGN KEY (sno) REFERENCES student(sno);
SHOW CREATE TABLE grade;
ALTER TABLE grade DROP FOREIGN KEY grade_ibfk_2;
ALTER TABLE grade MODIFY sno SMALLINT ;
SHOW CREATE TABLE grade;
ALTER TABLE grade DROP PRIMARY KEY ;
ALTER TABLE grade ADD FOREIGN KEY (sno) REFERENCES student(sno);
SHOW CREATE TABLE grade;
ALTER TABLE grade RENAME score;
SHOW CREATE TABLE score;

# 老师：教师编号(TNO)、教师姓名(TNAME)、性别(TSSEX)、生日(TBIRTHDAY)、职称(TITLE)、单位科室（DEPART）
CREATE TABLE IF NOT EXISTS teacher(
  tno SMALLINT KEY AUTO_INCREMENT,
  tname VARCHAR(20) NOT NULL ,
  tssex ENUM('男','女') NOT NULL ,
  title ENUM('讲师','高级讲师','副教授','教授') NOT NULL ,
  depart ENUM('数学系','电子工程系','计算机系','中文系','外语系') NOT NULL
);

SHOW TABLES ;
# 要求：
# 一、每张表使用sql语句插入至少10条数据
INSERT INTO student  VALUES
  (105,'赵一','男','1991-02-01', 95031),(106,'钱二','男','1991-03-01', 95031),(107,'孙三','女','1991-01-01', 95031),
  (108,'韩梅梅','女','1991-01-02', 95033),(109,'李磊','女','1991-04-01', 95033),(110,'王芳','女','1991-05-06', 95033),
  (112,'赵天','男','1991-07-01', 95031),(113,'李四','男','1991-09-01', 95031),(114,'刘芳','女','1991-11-11', 95033),
  (115,'李艳','男','1991-08-15', 95031),(116,'李艳艳','女','1991-09-17', 95033),(117,'方子','男','1991-08-18', 95033),
  (118,'景天','男','1991-05-11', 95031),(119,'熊美','女','1991-04-02', 95033),(120,'廖磊','男','1991-03-12', 95033);


INSERT course VALUES
  (305,'计算机导论','张旭'),
  (105,'电子工程','刘操'),
  (205,'大学英语','张迪芳'),
  (345,'高等数学','蔡静'),
  (325,'毛邓三','刘超'),
  (315,'大学语文','毛豆'),
  (335,'线性代数','张飞'),
  (135,'模电','关羽'),
  (145,'日语','诸葛亮'),
  (125,'数电','赵云');

INSERT score VALUES
  (105,305,85),(105,105,60),(106,205,75),(106,345,86),(107,315,88),(107,135,85),(108,125,90),(108,305,55),(109,145,66),
  (109,335,67),(110,305,78),(112,325,67),(113,345,90),(114,135,93),(115,325,87),(116,145,85),(117,105,98),(118,335,93),
  (119,315,43),(120,305,88),(115,315,90),(116,305,77),(117,135,45),(118,325,78),(119,205,90),(105,125,85),(107,325,66);

INSERT INTO teacher VALUES
  (NULL ,'张旭','男','高级讲师','计算机系'),
  (NULL ,'刘操','男','讲师','电子工程系'),
  (NULL ,'张迪芳','女','副教授','外语系'),
  (NULL ,'蔡静','女','教授','数学系'),
  (NULL ,'刘超','男','高级讲师','中文系'),
  (NULL ,'毛豆','女','教授','中文系'),
  (NULL ,'张飞','男','讲师','数学系'),
  (NULL ,'关羽','男','高级讲师','电子工程系'),
  (NULL ,'诸葛亮','男','高级讲师','外语系'),
  (NULL ,'赵云','男','高级讲师','数学系');





# 二、完成以下查询题目：
# 1、 查询Student表中的所有记录的Sname、Ssex和Class列。
SELECT sname, ssex, class FROM student;
# 2、 查询教师所有的单位即不重复的Depart列。

SELECT depart FROM teacher GROUP BY depart;

# 3、 查询Student表的所有记录。
SELECT * FROM student;

# 4、 查询Score表中成绩在60到80之间的所有记录。
SELECT * FROM score WHERE degree  BETWEEN 60 AND 80;

# 5、 查询Score表中成绩为85，86或88的记录。
SELECT * FROM score WHERE degree IN(85,86,88);

# 6、 查询Student表中“95031”班或性别为“女”的同学记录。
SELECT * FROM student WHERE class = '95031' OR ssex = '女';

# 7、 以Class降序查询Student表的所有记录。
SELECT * FROM student ORDER BY class DESC ;

# 8、 以Cno升序、Degree降序查询Score表的所有记录。
SELECT * FROM score ORDER BY cno ASC,degree DESC ;

# 9、 查询“95031”班的学生人数。
SELECT count(sno)学生人数 FROM student WHERE class = '95031';

# 10、查询Score表中的最高分的学生学号和课程号。
SELECT sno,cno FROM score WHERE degree = (SELECT MAX(degree) FROM score);

# 11、查询‘3-105’号课程的平均分。
SELECT AVG(degree) FROM score WHERE cno = 305;

# 12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。
SELECT cno,avg(degree) FROM score WHERE (SELECT count(sno) FROM score WHERE (SELECT FLOOR(cno / 100)) = 3) > 5;


# 13、查询最低分大于70，最高分小于90的Sno列。
# SELECT sno FROM score WHERE
# 14、查询所有学生的Sname、Cno和Degree列。
SELECT s.sname, c.cno, s1.degree FROM student AS s, course AS c, score AS s1  WHERE s.sno = s1.sno AND c.cno = s1.cno ORDER BY s.sname;

# 15、查询所有学生的Sno、Cname和Degree列。
SELECT s.sno, c.cname, s1.degree FROM student AS s JOIN (course AS c ,score AS s1) ON s.sno = s1.sno AND c.cno = s1.cno ORDER BY sno;

# 16、查询所有学生的Sname、Cname和Degree列。
SELECT s.sname, c.cname, s1.degree FROM student AS s JOIN (course AS c ,score AS s1) ON s.sno = s1.sno AND c.cno = s1.cno ORDER BY sname;

# 17、查询“95033”班所选课程的平均分。


# 18、假设使用如下命令建立了一个grade表：
# create table grade(low int,upp int,rank char(1));
# insert into grade values(90,100,’A’);
# insert into grade values(80,89,’B’);
# insert into grade values(70,79,’C’);
# insert into grade values(60,69,’D’);
# insert into grade values(0,59,’E’);
# commit;
# 现查询所有同学的Sno、Cno和rank列。
# 19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。
# 20、查询score中选学一门以上课程的同学中分数为非最高分成绩的记录。
# 21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。
# 22、查询和学号为108的同学同年出生的所有学生的Sno、Sname和Sbirthday列。
# 23、查询“张旭“教师任课的学生成绩。
# 24、查询选修某课程的同学人数多于5人的教师姓名。
# 25、查询95033班和95031班全体学生的记录。
# 26、查询存在有85分以上成绩的课程Cno.
# 27、查询出“计算机系“教师所教课程的成绩表。
# 28、查询“计算机系”与“电子工程系“不同职称的教师的Tname。
# 29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序。
# 30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree.
# 31、查询所有教师和同学的name、sex和birthday.
# 32、查询所有“女”教师和“女”同学的name、sex和birthday.
# 33、查询成绩比该课程平均成绩低的同学的成绩表。
# 34、查询所有任课教师的Tname和Depart.
# 35 查询所有未讲课的教师的Tname和Depart.
# 36、查询至少有2名男生的班号。
# 37、查询Student表中不姓“王”的同学记录。
# 38、查询Student表中每个学生的姓名和年龄。
# 39、查询Student表中最大和最小的Sbirthday日期值。
# 40、以班号和年龄从大到小的顺序查询Student表中的全部记录。
# 41、查询“男”教师及其所上的课程。
# 42、查询最高分同学的Sno、Cno和Degree列。
# 43、查询和“李军”同性别的所有同学的Sname.
# 44、查询和“李军”同性别并同班的同学Sname.
# 45、查询所有选修“计算机导论”课程的“男”同学的成绩表